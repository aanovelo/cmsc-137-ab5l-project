#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Asymmetric Ciphers
\end_layout

\begin_layout Standard
Cryptographic systems rely on keys for encryption and decryption.
 Traditionally, a single key is required to encrypt and to decrypt.
 In order for the recipient of the encrypted message to be decrypted by
 the recipient, the key must also be transmitted.
 However, sending the key over the channel (normal channel) where the actual
 message will be sent is insecure.
 The key must be transmitted on a different and secure channel (key channel)
\begin_inset CommandInset citation
LatexCommand cite
key "merkle_secure_1978"

\end_inset

.
 This secure channel where the key should be transmitted cannot be used
 for normal transmission because it is costly and sometimes difficult for
 users to access and use
\begin_inset CommandInset citation
LatexCommand cite
key "merkle_secure_1978"

\end_inset

.
 This begs the question whether it is possible to send encrypted messages
 in such a way that the key can also be transmitted over the normal (insecure)
 channel and still achieve secure communication.
 In this section, we focus on solving this problem by describing the relevant
 and important work on asymmetric ciphers.
 Figure 5 describes the flow in asymmetric cryptography.
 This section will not cover in detail the concept of 
\shape italic
digital signatures
\shape default
 which is closely related to the 
\shape italic
key distribution problem
\shape default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename flowchart1.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
In Asymmetric Cryptography, two keys are used: a public key and a private
 key.
 The public key is used for encryption and the private key for decryption.
 In the figure, if Shiela wants to send a message to Froi, Key A will be
 Froi’s public key and Key B will be Froi’s private key.
 Jade will not be able to decrypt Shiela’s message because he does not have
 Froi’s private key.
 This scheme works because it is computationally difficult for Jade to derive
 the private key of Froi by just using Froi’s public key.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Merkle (1978)
\end_layout

\begin_layout Standard
Secure communication, as described by Merkle
\begin_inset CommandInset citation
LatexCommand cite
key "merkle_secure_1978"

\end_inset

, allows two parties to communicate in a private manner even though a third
 party tries its best to learn what is being communicated.
 We refer to the two parties as Froi and Shiela, and the third party as
 Jade (Figure 5).
 Since the key channel is important, the following describes the characteristics
 of the channel in relation to Jade.
\end_layout

\begin_layout Enumerate
All attempts by Jade to change the messages on the key channel are detectable.
\end_layout

\begin_layout Enumerate
Jade will not be able to know the actual content of any message passing
 on the key channel.
\end_layout

\begin_layout Standard
The approach by Merkle relaxes the second condition: It is not necessary
 for Jade not to know what is being sent in the key channel, he can even
 know everything passing on it.
 The challenge then is how to securely distribute the key satisfying the
 conditions above.
 If Froi and Shiela have agreed upon a key, and the work needed by Jade
 to find the key is much higher than the effort by Froi and Shiela needed
 to generate the key , then it is a solution.
 The effort by Jade should be exponentially higher compared to the effort
 by Froi or Shiela for a method to be considered a solution.
 
\end_layout

\begin_layout Standard
Merkle's method uses the concept of puzzles
\begin_inset CommandInset citation
LatexCommand cite
key "merkle_secure_1978"

\end_inset

.
 A puzzle is a cryptogram that is meant to be solved.
 Any encryption function can be used to generate a puzzle.
 To allow the puzzle to be solved, the key size (N) used in the encryption
 function is restricted.
 The difficulty of solving a puzzle can be controlled by adjusting the size
 of N.
 A very large size (in bits) of N will make it very difficult to solve the
 puzzle.
 In addition, in order to be able to solve the puzzle, some redundancy is
 needed.
 Redundancy is introduced by encrypting, along with the original message,
 some constant known to Froi, Shiela, and Jade.
 The absence of the constant when a puzzle is decrypted would mean that
 a wrong key has been used.
 
\end_layout

\begin_layout Standard
Let us consider the scenario when Shiela wishes to send a message to Froi.
 First, they both agree on the value of N to use.
 Shiela then generates N puzzles and transmits these N puzzles to Froi using
 the key channel.
 Each puzzle generated will have a puzzle ID and puzzle key.
 The puzzle ID uniquely identifies each puzzle.
 The puzzle key on the other hand will be used in future communications
 that will happen once this puzzle has been solved.
 
\end_layout

\begin_layout Standard
When Froi receives the N puzzles, he selects a puzzle at random and attempts
 to solve the puzzle, with the amount of effort required, as defined by
 the size of the key space specified by Shiela.
 After solving a puzzle, Froi sends the puzzle ID back to Shiela using the
 key channel.
 The puzzle key, associated with the puzzle ID sent by Froi, is then used
 for future communications, this time over the normal channel.
 At this point Jade knows the puzzle ID, since it was sent using the key
 channel, but not the puzzle key.
 If Jade wants to know the key, then he must solve puzzles randomly and
 check the puzzle ID if it matches the one sent by Froi back to Shiela.
 This will take Jade a long time to solve.
 To put it formally, Jade will require 
\begin_inset Formula $O(N^{2})$
\end_inset

 effort to determine the key whereas Froi will only need, on the average,
 
\begin_inset Formula $O(N)$
\end_inset

.
 The function below generates the puzzles sent by Shiela to Froi.
 The encryption function is arbitrary.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left"
inline false
status open

\begin_layout Plain Layout

void generate_puzzle()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   bit_string id, key, c, random_key, puzzle, k1, k2;
\end_layout

\begin_layout Plain Layout

   int i;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   k1 = rand(MAXINT);
\end_layout

\begin_layout Plain Layout

   k2 = rand(MAXINT);
\end_layout

\begin_layout Plain Layout

   c = rand(MAXINT);
\end_layout

\begin_layout Plain Layout

   send(c);
\end_layout

\begin_layout Plain Layout

   for (i=0; i<N; i++)
\end_layout

\begin_layout Plain Layout

   {
\end_layout

\begin_layout Plain Layout

      id = encryption_function(k1,i);
\end_layout

\begin_layout Plain Layout

      key = encryption_function(k2, i);
\end_layout

\begin_layout Plain Layout

      random_key = rand(c*N);
\end_layout

\begin_layout Plain Layout

      puzzle = encryption_function(random_key,id,key,c);
\end_layout

\begin_layout Plain Layout

      send(puzzle);
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code below is executed on Froi's side.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left"
inline false
status open

\begin_layout Plain Layout

void get_id()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   bit_string id, key, c, selected_puzzle_id, the_puzzle, current_puzzle,
\end_layout

\begin_layout Plain Layout

              temp_constant;
\end_layout

\begin_layout Plain Layout

   int i;
\end_layout

\begin_layout Plain Layout

   
\end_layout

\begin_layout Plain Layout

   selected_puzzle_id = rand(N);
\end_layout

\begin_layout Plain Layout

   receive(c);
\end_layout

\begin_layout Plain Layout

   for (i=0; i<N; i++)
\end_layout

\begin_layout Plain Layout

   {
\end_layout

\begin_layout Plain Layout

      receive(currrent_puzzle);
\end_layout

\begin_layout Plain Layout

      if (i == selected_puzzle_id)
\end_layout

\begin_layout Plain Layout

         the_puzzle = current_puzzle;
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

   for (i=0;i<(c*N);i++)
\end_layout

\begin_layout Plain Layout

   {
\end_layout

\begin_layout Plain Layout

      id = get_id(finverse(i, the_puzzle));  
\end_layout

\begin_layout Plain Layout

      key = get_key(finverse(i, the_puzzle));
\end_layout

\begin_layout Plain Layout

      temp_constant = get_constant(finverse(i, the_puzzle));
\end_layout

\begin_layout Plain Layout

      if (temp_constant == c)
\end_layout

\begin_layout Plain Layout

         send(id);
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Once Shiela receives the the puzzle ID from Froi, then the following code
 will be executed.
 key will be used for subsequent communications between the two.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left"
inline false
status open

\begin_layout Plain Layout

void continue_transmission()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   receive(ID);
\end_layout

\begin_layout Plain Layout

   key = encryption_function(k2, ID);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The approach by Merkle requires an effort of 
\begin_inset Formula $O(N^{2})$
\end_inset

 from Jade to get the key.
 However, in todays available computing resources, this can be easily broken.
 The possibility of exponential methods will be more attractive.
 Also the amount of information sent during the initial setup of the communicati
on is large because N puzzles, consequently N keys, are sent initially.
\end_layout

\begin_layout Subsection
Diffie-Hellman (1976)
\end_layout

\begin_layout Standard
The work by Diffie and Hellman
\begin_inset CommandInset citation
LatexCommand cite
key "diffie_new_1976"

\end_inset

 proposed a method such that only one 
\begin_inset Quotes eld
\end_inset

key
\begin_inset Quotes erd
\end_inset

 needs to be exchanged and in addition the time required from Jade to perform
 cryptanalysis is exponential.
 In addition, it allows authentication because its use allows it to be tied
 to a public file of user information.
 Shiela can authenticate Froi and vice versa.
 
\end_layout

\begin_layout Standard
Diffie and Hellman differentiate 
\shape italic
public key cryptosystems
\shape default
 and 
\shape italic
public key distribution systems
\shape default
.
 We let 
\begin_inset Formula ${K}$
\end_inset

 be the finite key space from which keys 
\begin_inset Formula $K$
\end_inset

 can be obtained and 
\begin_inset Formula ${M}$
\end_inset

 be the finite message space where messages 
\begin_inset Formula $M$
\end_inset

 are derived.
 A 
\shape italic
public key cryptosystem
\shape default
 is a pair of families of algorithms 
\begin_inset Formula ${E_{k}}$
\end_inset

 and
\begin_inset Formula ${D_{k}}$
\end_inset

 which represent invertible transformations
\begin_inset CommandInset citation
LatexCommand cite
key "diffie_new_1976"

\end_inset

.
 
\begin_inset Formula 
\[
E_{k}:\{M\}\rightarrow\{M\}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
D_{k}:\{M\}\rightarrow\{M\}
\]

\end_inset


\end_layout

\begin_layout Standard
such that 
\end_layout

\begin_layout Enumerate
for every key 
\begin_inset Formula $K$
\end_inset

, 
\begin_inset Formula $E_{k}$
\end_inset

 is the inverse of 
\begin_inset Formula $D_{k}$
\end_inset

,
\end_layout

\begin_layout Enumerate
for every 
\begin_inset Formula $K$
\end_inset

 and 
\begin_inset Formula $M$
\end_inset

, the algorithms 
\begin_inset Formula $E_{k}$
\end_inset

 and 
\begin_inset Formula $D_{k}$
\end_inset

 are easy to compute,
\end_layout

\begin_layout Enumerate
for almost every 
\begin_inset Formula $K$
\end_inset

, each easily computed algorithm equivalent to 
\begin_inset Formula $D_{k}$
\end_inset

 is computationally infeasible to derive from 
\begin_inset Formula $E_{k}$
\end_inset

,
\end_layout

\begin_layout Enumerate
for every 
\begin_inset Formula $K$
\end_inset

, it is feasible to compute inverse pairs 
\begin_inset Formula $E_{k}$
\end_inset

 and 
\begin_inset Formula $D_{k}$
\end_inset

 from 
\begin_inset Formula $K$
\end_inset

.
\end_layout

\begin_layout Standard
Property 3 allows 
\begin_inset Formula $E_{k}$
\end_inset

 to be made public without compromising 
\begin_inset Formula $D_{k}$
\end_inset

.
 Key distribution in this system is simplified.
 Users generate two keys, an enciphering key 
\begin_inset Formula $E$
\end_inset

 and a deciphering key 
\begin_inset Formula $D$
\end_inset

.
 
\begin_inset Formula $E$
\end_inset

 can be made public but 
\begin_inset Formula $D$
\end_inset

 is kept privately by the user.
 Any entity who would like to send messages to a user can use the publicly
 available 
\begin_inset Formula $E$
\end_inset

 to encrypt messages but only the user can decrypt the message using 
\begin_inset Formula $D$
\end_inset

.
 In their paper, Diffie and Hellman gave an example public key cryptosystem
 by multiplying a binary n-vector message m with an invertible binary n
 x n matrix E.
 However, this approach is not practical.
\end_layout

\begin_layout Standard
Merkle's
\begin_inset CommandInset citation
LatexCommand cite
key "merkle_secure_1978"

\end_inset

 work was classified by Diffie and Hellman as 
\shape italic
public key distribution system
\shape default
 and highlighted its limitations specifically its high transmission overhead
 again because of sending N puzzles initially.
 The proposed system is similar to the public key cryptosystem described
 above, but unlike Merkle's technique, Diffie and Hellman approach allows
 the authentication of users by making the public file read-only
\begin_inset CommandInset citation
LatexCommand cite
key "diffie_new_1976"

\end_inset

.
 
\end_layout

\begin_layout Standard
The technique proposed is dependent on the difficulty of computing 
\begin_inset Formula $logs\: mod\: q$
\end_inset

 where 
\series bold
q
\series default
 is a prime number representing the number of elements of a finite field.
 Users generate independent random numbers 
\begin_inset Formula $X_{i}$
\end_inset

 from the set of integers 
\begin_inset Formula $\left\{ 1,2,...,q-1\right\} $
\end_inset

.
 The users keep these numbers but the computed value 
\begin_inset Formula 
\[
Y_{i}=\alpha^{X_{i}}mod\: q
\]

\end_inset


\end_layout

\begin_layout Standard
is placed publicly together with the user information( such as name and
 email).
 
\end_layout

\begin_layout Standard
Consider for example Shiela and Froi would like to talk to each other privately.
 They are going to use the key 
\begin_inset Formula $K_{Shiela,Froi}$
\end_inset

below after they generate 
\begin_inset Formula $X_{Shiela}$
\end_inset

and 
\begin_inset Formula $X_{Froi}$
\end_inset

 and published 
\begin_inset Formula $Y_{Shiela}$
\end_inset

 and 
\begin_inset Formula $Y_{Froi}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
K_{Shiela,Froi}=\alpha^{X_{Shiela}X_{Froi}}mod\: q
\]

\end_inset


\end_layout

\begin_layout Standard
Shiela will be able to obtain 
\begin_inset Formula $K_{Shiela,Froi}$
\end_inset

 by using the public file 
\begin_inset Formula $Y_{Froi}$
\end_inset

 and then computing
\begin_inset Formula 
\[
K_{Shiela,Froi}=Y_{Froi}^{X_{Shiela}}mod\: q
\]

\end_inset

 
\begin_inset Formula 
\[
=(\alpha^{X_{Froi}})^{X_{Shiela}}mod\: q
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
=\alpha^{X_{Froi}X_{Shiela}}=\alpha^{X_{Shiela}X_{Froi}}mod\: q
\]

\end_inset


\end_layout

\begin_layout Standard
Froi will be able to obtain the key in the same manner.
 
\begin_inset Formula 
\[
K_{Sheila,Froi}=Y_{Shiela}^{X_{Froi}}mod\: q
\]

\end_inset

 
\end_layout

\begin_layout Standard
Jade might be able to compute
\begin_inset Formula $K_{Shiela,Froi}$
\end_inset

 from 
\begin_inset Formula $Y_{Shiela}$
\end_inset

 and 
\begin_inset Formula $Y_{Froi}$
\end_inset

 by computing
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
K_{Shiela,Froi}=Y_{Shiela}^{(\log_{\alpha}Y_{Froi})}mod\: q
\]

\end_inset


\end_layout

\begin_layout Standard
However, if Jade is to perform this computation, it will take him a long
 time to do so.
 This system takes advantage of the fact that 
\begin_inset Formula $logs\: mod\: q$
\end_inset

 are expensive to compute.
\end_layout

\begin_layout Subsection
Rivest-Shamir-Adleman (1978)
\end_layout

\begin_layout Standard
The RSA algorithm by Rivest, Shamir, and Andleman was inspired by the work
 of Diffie and Hellman.
 Despite the breakthrough in Diffie and Hellman's work in public key cryptosyste
ms, they did not present any practical implementation that can be used in
 actual systems.
 The creators of RSA took the work further by presenting a practical and
 efficient implementation.
 Given an encryption procedure 
\series bold
E
\series default
 ,a decryption procedure 
\series bold
D
\series default
, and a message 
\series bold
P
\series default
, a public key cryptosystem has the following properties
\begin_inset CommandInset citation
LatexCommand cite
key "rivest_method_1978"

\end_inset

:
\end_layout

\begin_layout Enumerate
Decrypting an encrypted 
\series bold
P
\series default
 results to 
\series bold
P
\series default
.
 
\series bold
D
\series default
(
\series bold
E
\series default
(
\series bold
P
\series default
)) = 
\series bold
P.
\end_layout

\begin_layout Enumerate

\series bold
D
\series default
 and 
\series bold
E
\series default
 are easy to compute.
\end_layout

\begin_layout Enumerate
Publicly revealing 
\series bold
E
\series default
 does not mean that it will be easy to compute 
\series bold
D
\series default
 from 
\series bold
E
\series default
.
 It should be difficult or inefficient to compute 
\series bold
D
\series default
 from 
\series bold
E
\series default
.
\end_layout

\begin_layout Enumerate
If 
\series bold
P
\series default
 is decrypted and then encrypted, 
\series bold
P
\series default
 is the result.
 
\series bold
E
\series default
(
\series bold
D
\series default
(
\series bold
P
\series default
)) = 
\series bold
P
\series default
.
\end_layout

\begin_layout Standard
The encryption and decryption functions rely on a key such that the security
 of the functions or procedures rests on the security of the key.
 If 
\series bold
E
\series default
 satisfies properties 1-3 is referred to as 
\begin_inset Quotes eld
\end_inset

trap-door one way function
\begin_inset Quotes erd
\end_inset

.
 If it also satisfies property 4 then it is referred to as 
\begin_inset Quotes eld
\end_inset

trap-door one-way permutation
\begin_inset Quotes erd
\end_inset

.
 In public key cryptosystems the usual 
\begin_inset Quotes eld
\end_inset

setup
\begin_inset Quotes erd
\end_inset

 time is simply the time it takes to make the encryption function public.
\begin_inset Foot
status open

\begin_layout Plain Layout
In their paper, it is the encryption function that is made public.
 Other researchers talk about keys being made public, not the functions.
 Essentially, however, there is a one-to-one correspondence between the
 encryption function and the key.
\end_layout

\end_inset

 If Shiela wants to encrypt a message 
\series bold
P
\series default
, for Froi, with the key 
\series bold
(e, n)
\series default
, she must first represent 
\series bold
P
\series default
 as an integer between 
\series bold
0
\series default
 and 
\series bold
n-1
\series default
, where 
\series bold
e
\series default
 and 
\series bold
n
\series default
 are positive integers.
 
\series bold
P
\series default
 is then encrypted to generate the ciphertext 
\series bold
C
\series default
 by raising 
\series bold
P
\series default
 to the 
\begin_inset Formula $e^{th}$
\end_inset

 power modulo 
\series bold
n
\series default
.
 The decryption process will raise the ciphertext to another power 
\series bold
d
\series default
 modulo 
\series bold
n
\series default
.
 The mathematical formulation is shown below.
 
\begin_inset Formula 
\[
C\equiv E(P)\equiv P^{e}(mod\: n)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
P\equiv D(C)\equiv C^{d}(mod\: n)
\]

\end_inset


\end_layout

\begin_layout Standard
The length of the original message is not increased during the encryption
 process.
 The pairs 
\series bold
(e,n)
\series default
 and 
\series bold
(d,n)
\series default
 are the encryption keys and decryption keys respectively.
 The encryption key is made public and the decryption key is private to
 the user.
 In the above example, 
\series bold
(e,n)
\series default
 is the public key of Froi, he can decrypt the message using 
\series bold
(d,n)
\series default
 which is in his possession.
 The security of the approach is based on the security of the keys, thus
 the keys must be selected well.
 
\series bold
n
\series default
 is computed as a product of two large random primes 
\series bold
p
\series default
 and 
\series bold
q
\series default
, 
\series bold
n = p * q
\series default
.
 Although 
\series bold
n
\series default
 will be made public, 
\series bold
p
\series default
 and 
\series bold
q
\series default
 will not, which hides the way 
\series bold
d
\series default
 can be derived from 
\series bold
e
\series default
.
 
\series bold
d
\series default
 is a random integer such that 
\begin_inset Formula $gcd(d,(p-1)*(q-1))=1$
\end_inset

.
 
\series bold
e
\series default
 is computed from 
\series bold
p
\series default
, 
\series bold
q
\series default
, and 
\series bold
d
\series default
 such that
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
e*d\equiv1(mod(p-1)*(q-1))
\]

\end_inset


\end_layout

\begin_layout Standard
This requirement guarantees that properties 1 and 4 above are satisfied,
 which means that 
\series bold
E
\series default
 and 
\series bold
D
\series default
 are inverse permutations.
 Although Diffie and Hellman
\begin_inset CommandInset citation
LatexCommand cite
key "diffie_new_1976"

\end_inset

 also used exponentiation and modulo in determining a common key to be used,
 their approach is not based on a 
\begin_inset Quotes eld
\end_inset

trap-door one-way permutation
\begin_inset Quotes erd
\end_inset

 which means that property 4 is satisfied.
\end_layout

\begin_layout Standard
The creators of RSA presented an efficient implementation of the of their
 approach.
 Note that the basic operations in the encryption and decryption process
 are exponentiation and division (to compute the remainder).
 The technique is called 
\begin_inset Quotes eld
\end_inset

exponentiation by repeated squaring and multiplication.
\begin_inset Quotes erd
\end_inset

 The technique presented will need at most 
\begin_inset Formula $2*\log_{2}(e)$
\end_inset

 multiplications and 
\begin_inset Formula $2*\log_{2}(e)$
\end_inset

 divisions.
 The encryption and decryption algorithms are shown below.
\begin_inset listings
lstparams "language=C,numbers=left"
inline false
status open

\begin_layout Plain Layout

long E(long P,int e, int n)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   long C=1;
\end_layout

\begin_layout Plain Layout

   int i;
\end_layout

\begin_layout Plain Layout

   
\end_layout

\begin_layout Plain Layout

   for (i=k;k==0;k--)
\end_layout

\begin_layout Plain Layout

   {
\end_layout

\begin_layout Plain Layout

      C = (C * C) % n;
\end_layout

\begin_layout Plain Layout

      if (bit(i,e) == 1) /* bit(i,e) returns the ith bit of e*/
\end_layout

\begin_layout Plain Layout

         C = (C * P) % n;
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

   return C;  
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

long D(long C,int d, int n)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   long P=1;
\end_layout

\begin_layout Plain Layout

   int i;
\end_layout

\begin_layout Plain Layout

   
\end_layout

\begin_layout Plain Layout

   for (i=k;k==0;k--)
\end_layout

\begin_layout Plain Layout

   {
\end_layout

\begin_layout Plain Layout

      P = (P * P) % n;
\end_layout

\begin_layout Plain Layout

      if (bit(i,d) == 1) /* bit(i,d) returns the ith bit of d*/
\end_layout

\begin_layout Plain Layout

         P = (P * C) % n;
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

   return P;  
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
It can be seen that the RSA encryption and decryption algorithms are straightfor
ward to implement.
 The challenge however is in the selection of the keys which is dependent
 of several parameters (
\series bold
e
\series default
, 
\series bold
d
\series default
, 
\series bold
n
\series default
).
 In their paper, the creators of RSA also presented several approaches how
 to generate these parameters to guarantee the security.
\end_layout

\begin_layout Subsection
Elgamal (1985)
\end_layout

\begin_layout Standard
The RSA
\begin_inset CommandInset citation
LatexCommand cite
key "rivest_method_1978"

\end_inset

 system depends on the difficulty of factoring large integers.
 Elgamal's work is based on the difficulty of computing logarithms over
 finite fields
\begin_inset CommandInset citation
LatexCommand cite
key "elgamal_public_1985"

\end_inset

.
 This approach is similar to Diffie and Hellman but is more practical for
 implementation.
 In Diffie and Hellman, 
\series bold
q
\series default
 is a prime number representing the number of elements of a finite field
 (we will use 
\series bold
p
\series default
 instead for consistency with Elgamal's paper).
 In order for make it difficult to compute the discrete logarithm, 
\series bold
p
\series default
 must be chosen so that 
\series bold
p-1
\series default
 have at least one large prime factor.
 Suppose Shiela wants to send a message 
\series bold
m
\series default
 to Froi where 
\begin_inset Formula $0\leq m\leq(p-1)$
\end_inset

.
 Shiela chooses a number 
\series bold
k
\series default
 uniformly between 
\series bold
0
\series default
 and 
\series bold
p-1
\series default
.
 This 
\series bold
k
\series default
 will be 
\begin_inset Formula $X_{Shiela}$
\end_inset

, which is her secret key.
 
\begin_inset Formula $K_{Shiela,Froi}$
\end_inset

 is computed as follow:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
K_{Shiela,Froi}=Y_{Froi}^{k}mod\: p
\]

\end_inset

 
\begin_inset Formula $Y_{Froi}$
\end_inset

 is public.
 Then the ciphertext 
\series bold
C
\series default
 that will be generated is the pair 
\begin_inset Formula $(c_{1},c_{2})$
\end_inset

, such that
\begin_inset Formula 
\[
c_{1}=\alpha^{k}mod\: p
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
c_{2}=K_{Shiela,Froi}m\: mod\: p
\]

\end_inset


\end_layout

\begin_layout Standard
Since the ciphertext is a pair
\begin_inset Formula $(c_{1},c_{2})$
\end_inset

, then its size is twice the size of the message 
\series bold
m
\series default
.
 When Froi receives 
\series bold
C
\series default
, the process of decrypting is divided into two parts.
 First is to recover 
\begin_inset Formula $K_{Shiela,Froi}$
\end_inset

using 
\begin_inset Formula $c_{1}^{X_{Froi}}mod\: p$
\end_inset

.
 Note that 
\begin_inset Formula $X_{Froi}$
\end_inset

 is Froi's secret key which only he knows.
 The second step is to divide 
\begin_inset Formula $c_{2}$
\end_inset

 by 
\begin_inset Formula $K_{Shiela,Froi}$
\end_inset

 which recover the message 
\series bold
m.
\begin_inset Formula 
\[
m=\frac{c_{2}}{K_{Shiela,Froi}}
\]

\end_inset

 
\series default
The randomization in the encryption process (selection of 
\series bold
k
\series default
) is unique to Elgamal's method.
 This results to the ciphertext 
\series bold
C
\series default
 of the message 
\series bold
m
\series default
 not being repeated.
 This provide added security because Jade will not be able to obtain a pattern
 for running the encryption process repeatedly in case he guesses that the
 message is indeed 
\series bold
m
\series default
.
 Another notable difference is that the structure of the system does not
 disclose obvious relations between two messages 
\begin_inset Formula $m_{1}$
\end_inset

 and 
\begin_inset Formula $m_{2}$
\end_inset

 and their simple functions such as the concatenation 
\begin_inset Formula $m_{1}m_{2}$
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "elgamal_public_1985"

\end_inset

 .
\end_layout

\begin_layout Subsection
Elliptic Curve Cryptosystems (1987)
\end_layout

\begin_layout Standard
The cryptosystems described above is based on the multiplicative group of
 a finite field 
\begin_inset Formula $GF(q),q=p^{n}$
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "koblitz_elliptic_1987"

\end_inset

.
 An elliptic curve 
\begin_inset Formula $E_{k}$
\end_inset

 define over a field 
\begin_inset Formula $K$
\end_inset

 of characteristic 
\begin_inset Formula $\neq$
\end_inset

 2 or 3 is the set of solutions 
\begin_inset Formula $(x,y)\in K^{2}$
\end_inset

) to the equation
\begin_inset Formula 
\[
y^{2}=X^{2}+ax+b,\;\;\; a,b\in K
\]

\end_inset


\end_layout

\begin_layout Standard
The main impact of elliptic curve cryptography is enhanced security because
 the counterpart of the discrete logarithms problem (which is the basis
 of the previously discussed methods) in elliptic curves is harder
\begin_inset CommandInset citation
LatexCommand cite
key "koblitz_elliptic_1987"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "asymmetric"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
